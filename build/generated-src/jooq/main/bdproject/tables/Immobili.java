/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.ImmobiliRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Immobili extends TableImpl<ImmobiliRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.immobili</code>
     */
    public static final Immobili IMMOBILI = new Immobili();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImmobiliRecord> getRecordType() {
        return ImmobiliRecord.class;
    }

    /**
     * The column <code>utenze.immobili.IdImmobile</code>.
     */
    public final TableField<ImmobiliRecord, Integer> IDIMMOBILE = createField(DSL.name("IdImmobile"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.immobili.Tipo</code>.
     */
    public final TableField<ImmobiliRecord, String> TIPO = createField(DSL.name("Tipo"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>utenze.immobili.Via</code>.
     */
    public final TableField<ImmobiliRecord, String> VIA = createField(DSL.name("Via"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.immobili.NumCivico</code>.
     */
    public final TableField<ImmobiliRecord, String> NUMCIVICO = createField(DSL.name("NumCivico"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>utenze.immobili.Interno</code>.
     */
    public final TableField<ImmobiliRecord, String> INTERNO = createField(DSL.name("Interno"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>utenze.immobili.Comune</code>.
     */
    public final TableField<ImmobiliRecord, String> COMUNE = createField(DSL.name("Comune"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.immobili.Provincia</code>.
     */
    public final TableField<ImmobiliRecord, String> PROVINCIA = createField(DSL.name("Provincia"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>utenze.immobili.CAP</code>.
     */
    public final TableField<ImmobiliRecord, String> CAP = createField(DSL.name("CAP"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    private Immobili(Name alias, Table<ImmobiliRecord> aliased) {
        this(alias, aliased, null);
    }

    private Immobili(Name alias, Table<ImmobiliRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.immobili</code> table reference
     */
    public Immobili(String alias) {
        this(DSL.name(alias), IMMOBILI);
    }

    /**
     * Create an aliased <code>utenze.immobili</code> table reference
     */
    public Immobili(Name alias) {
        this(alias, IMMOBILI);
    }

    /**
     * Create a <code>utenze.immobili</code> table reference
     */
    public Immobili() {
        this(DSL.name("immobili"), null);
    }

    public <O extends Record> Immobili(Table<O> child, ForeignKey<O, ImmobiliRecord> key) {
        super(child, key, IMMOBILI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<ImmobiliRecord, Integer> getIdentity() {
        return (Identity<ImmobiliRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImmobiliRecord> getPrimaryKey() {
        return Keys.KEY_IMMOBILI_PRIMARY;
    }

    @Override
    public List<UniqueKey<ImmobiliRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_IMMOBILI_AK_IMMOBILE);
    }

    @Override
    public List<Check<ImmobiliRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("immobili_chk_1"), "((`Tipo` = _utf8mb4\\'Fabbricato\\') or (`Tipo` = _utf8mb4\\'Terreno\\'))", true),
            Internal.createCheck(this, DSL.name("immobili_chk_2"), "(length(`CAP`) = 5)", true),
            Internal.createCheck(this, DSL.name("TERRAIN_NO_UNIT"), "(((`Tipo` = _utf8mb4\\'Terreno\\') and (`Interno` = _utf8mb4\\'\\')) or (`Tipo` = _utf8mb4\\'Fabbricato\\'))", true)
        );
    }

    @Override
    public Immobili as(String alias) {
        return new Immobili(DSL.name(alias), this);
    }

    @Override
    public Immobili as(Name alias) {
        return new Immobili(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Immobili rename(String name) {
        return new Immobili(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Immobili rename(Name name) {
        return new Immobili(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
