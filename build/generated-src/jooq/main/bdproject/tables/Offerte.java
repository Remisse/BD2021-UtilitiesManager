/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.OfferteRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offerte extends TableImpl<OfferteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.offerte</code>
     */
    public static final Offerte OFFERTE = new Offerte();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfferteRecord> getRecordType() {
        return OfferteRecord.class;
    }

    /**
     * The column <code>utenze.offerte.CodOfferta</code>.
     */
    public final TableField<OfferteRecord, Integer> CODOFFERTA = createField(DSL.name("CodOfferta"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.offerte.Nome</code>.
     */
    public final TableField<OfferteRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>utenze.offerte.Descrizione</code>.
     */
    public final TableField<OfferteRecord, String> DESCRIZIONE = createField(DSL.name("Descrizione"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>utenze.offerte.CostoMateriaPrima</code>.
     */
    public final TableField<OfferteRecord, BigDecimal> COSTOMATERIAPRIMA = createField(DSL.name("CostoMateriaPrima"), SQLDataType.DECIMAL(10, 4).nullable(false), this, "");

    /**
     * The column <code>utenze.offerte.Attiva</code>.
     */
    public final TableField<OfferteRecord, Byte> ATTIVA = createField(DSL.name("Attiva"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>utenze.offerte.MateriaPrima</code>.
     */
    public final TableField<OfferteRecord, String> MATERIAPRIMA = createField(DSL.name("MateriaPrima"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private Offerte(Name alias, Table<OfferteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offerte(Name alias, Table<OfferteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.offerte</code> table reference
     */
    public Offerte(String alias) {
        this(DSL.name(alias), OFFERTE);
    }

    /**
     * Create an aliased <code>utenze.offerte</code> table reference
     */
    public Offerte(Name alias) {
        this(alias, OFFERTE);
    }

    /**
     * Create a <code>utenze.offerte</code> table reference
     */
    public Offerte() {
        this(DSL.name("offerte"), null);
    }

    public <O extends Record> Offerte(Table<O> child, ForeignKey<O, OfferteRecord> key) {
        super(child, key, OFFERTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<OfferteRecord, Integer> getIdentity() {
        return (Identity<OfferteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OfferteRecord> getPrimaryKey() {
        return Keys.KEY_OFFERTE_PRIMARY;
    }

    @Override
    public List<ForeignKey<OfferteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_INTERESSE);
    }

    private transient MateriePrime _materiePrime;

    public MateriePrime materiePrime() {
        if (_materiePrime == null)
            _materiePrime = new MateriePrime(this, Keys.FK_INTERESSE);

        return _materiePrime;
    }

    @Override
    public List<Check<OfferteRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("offerte_chk_1"), "(`CostoMateriaPrima` > 0.0)", true)
        );
    }

    @Override
    public Offerte as(String alias) {
        return new Offerte(DSL.name(alias), this);
    }

    @Override
    public Offerte as(Name alias) {
        return new Offerte(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offerte rename(String name) {
        return new Offerte(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offerte rename(Name name) {
        return new Offerte(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, BigDecimal, Byte, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
