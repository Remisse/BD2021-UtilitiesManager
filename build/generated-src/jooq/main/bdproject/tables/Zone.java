/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.ZoneRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Zone extends TableImpl<ZoneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.zone</code>
     */
    public static final Zone ZONE = new Zone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZoneRecord> getRecordType() {
        return ZoneRecord.class;
    }

    /**
     * The column <code>utenze.zone.IdZona</code>.
     */
    public final TableField<ZoneRecord, Integer> IDZONA = createField(DSL.name("IdZona"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.zone.Comune</code>.
     */
    public final TableField<ZoneRecord, String> COMUNE = createField(DSL.name("Comune"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.zone.Provincia</code>.
     */
    public final TableField<ZoneRecord, String> PROVINCIA = createField(DSL.name("Provincia"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    private Zone(Name alias, Table<ZoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Zone(Name alias, Table<ZoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.zone</code> table reference
     */
    public Zone(String alias) {
        this(DSL.name(alias), ZONE);
    }

    /**
     * Create an aliased <code>utenze.zone</code> table reference
     */
    public Zone(Name alias) {
        this(alias, ZONE);
    }

    /**
     * Create a <code>utenze.zone</code> table reference
     */
    public Zone() {
        this(DSL.name("zone"), null);
    }

    public <O extends Record> Zone(Table<O> child, ForeignKey<O, ZoneRecord> key) {
        super(child, key, ZONE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<ZoneRecord, Integer> getIdentity() {
        return (Identity<ZoneRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ZoneRecord> getPrimaryKey() {
        return Keys.KEY_ZONE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ZoneRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ZONE_AK_ZONA);
    }

    @Override
    public Zone as(String alias) {
        return new Zone(DSL.name(alias), this);
    }

    @Override
    public Zone as(Name alias) {
        return new Zone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Zone rename(String name) {
        return new Zone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zone rename(Name name) {
        return new Zone(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
