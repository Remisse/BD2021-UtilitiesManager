/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Utenze;
import bdproject.tables.records.ContrattiAttiviRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContrattiAttivi extends TableImpl<ContrattiAttiviRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.contratti attivi</code>
     */
    public static final ContrattiAttivi CONTRATTI_ATTIVI = new ContrattiAttivi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContrattiAttiviRecord> getRecordType() {
        return ContrattiAttiviRecord.class;
    }

    /**
     * The column <code>utenze.contratti attivi.IdContratto</code>.
     */
    public final TableField<ContrattiAttiviRecord, Integer> IDCONTRATTO = createField(DSL.name("IdContratto"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>utenze.contratti attivi.DataAperturaRichiesta</code>.
     */
    public final TableField<ContrattiAttiviRecord, LocalDate> DATAAPERTURARICHIESTA = createField(DSL.name("DataAperturaRichiesta"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.DataChiusuraRichiesta</code>.
     */
    public final TableField<ContrattiAttiviRecord, LocalDate> DATACHIUSURARICHIESTA = createField(DSL.name("DataChiusuraRichiesta"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>utenze.contratti attivi.StatoRichiesta</code>.
     */
    public final TableField<ContrattiAttiviRecord, String> STATORICHIESTA = createField(DSL.name("StatoRichiesta"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.NoteRichiesta</code>.
     */
    public final TableField<ContrattiAttiviRecord, String> NOTERICHIESTA = createField(DSL.name("NoteRichiesta"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.NumeroComponenti</code>.
     */
    public final TableField<ContrattiAttiviRecord, Integer> NUMEROCOMPONENTI = createField(DSL.name("NumeroComponenti"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.Uso</code>.
     */
    public final TableField<ContrattiAttiviRecord, Integer> USO = createField(DSL.name("Uso"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.Offerta</code>.
     */
    public final TableField<ContrattiAttiviRecord, Integer> OFFERTA = createField(DSL.name("Offerta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.TipoAttivazione</code>.
     */
    public final TableField<ContrattiAttiviRecord, Integer> TIPOATTIVAZIONE = createField(DSL.name("TipoAttivazione"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.IdImmobile</code>.
     */
    public final TableField<ContrattiAttiviRecord, Integer> IDIMMOBILE = createField(DSL.name("IdImmobile"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti attivi.IdCliente</code>.
     */
    public final TableField<ContrattiAttiviRecord, Integer> IDCLIENTE = createField(DSL.name("IdCliente"), SQLDataType.INTEGER.nullable(false), this, "");

    private ContrattiAttivi(Name alias, Table<ContrattiAttiviRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContrattiAttivi(Name alias, Table<ContrattiAttiviRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `contratti attivi` as select `utenze`.`c`.`IdContratto` AS `IdContratto`,`utenze`.`c`.`DataAperturaRichiesta` AS `DataAperturaRichiesta`,`utenze`.`c`.`DataChiusuraRichiesta` AS `DataChiusuraRichiesta`,`utenze`.`c`.`StatoRichiesta` AS `StatoRichiesta`,`utenze`.`c`.`NoteRichiesta` AS `NoteRichiesta`,`utenze`.`c`.`NumeroComponenti` AS `NumeroComponenti`,`utenze`.`c`.`Uso` AS `Uso`,`utenze`.`c`.`Offerta` AS `Offerta`,`utenze`.`c`.`TipoAttivazione` AS `TipoAttivazione`,`utenze`.`c`.`IdImmobile` AS `IdImmobile`,`utenze`.`c`.`IdCliente` AS `IdCliente` from `utenze`.`contratti approvati` `c` where exists(select `e`.`NumeroRichiesta` from `utenze`.`cessazioni` `e` where ((`e`.`IdContratto` = `utenze`.`c`.`IdContratto`) and (`e`.`DataChiusuraRichiesta` is not null) and (`e`.`StatoRichiesta` = 'Approvata'))) is false"));
    }

    /**
     * Create an aliased <code>utenze.contratti attivi</code> table reference
     */
    public ContrattiAttivi(String alias) {
        this(DSL.name(alias), CONTRATTI_ATTIVI);
    }

    /**
     * Create an aliased <code>utenze.contratti attivi</code> table reference
     */
    public ContrattiAttivi(Name alias) {
        this(alias, CONTRATTI_ATTIVI);
    }

    /**
     * Create a <code>utenze.contratti attivi</code> table reference
     */
    public ContrattiAttivi() {
        this(DSL.name("contratti attivi"), null);
    }

    public <O extends Record> ContrattiAttivi(Table<O> child, ForeignKey<O, ContrattiAttiviRecord> key) {
        super(child, key, CONTRATTI_ATTIVI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public ContrattiAttivi as(String alias) {
        return new ContrattiAttivi(DSL.name(alias), this);
    }

    @Override
    public ContrattiAttivi as(Name alias) {
        return new ContrattiAttivi(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContrattiAttivi rename(String name) {
        return new ContrattiAttivi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContrattiAttivi rename(Name name) {
        return new ContrattiAttivi(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, LocalDate, LocalDate, String, String, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
