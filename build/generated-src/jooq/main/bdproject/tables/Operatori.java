/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.OperatoriRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Operatori extends TableImpl<OperatoriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.operatori</code>
     */
    public static final Operatori OPERATORI = new Operatori();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperatoriRecord> getRecordType() {
        return OperatoriRecord.class;
    }

    /**
     * The column <code>utenze.operatori.CodiceOperatore</code>.
     */
    public final TableField<OperatoriRecord, Integer> CODICEOPERATORE = createField(DSL.name("CodiceOperatore"), SQLDataType.INTEGER.nullable(false), this, "");

    private Operatori(Name alias, Table<OperatoriRecord> aliased) {
        this(alias, aliased, null);
    }

    private Operatori(Name alias, Table<OperatoriRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.operatori</code> table reference
     */
    public Operatori(String alias) {
        this(DSL.name(alias), OPERATORI);
    }

    /**
     * Create an aliased <code>utenze.operatori</code> table reference
     */
    public Operatori(Name alias) {
        this(alias, OPERATORI);
    }

    /**
     * Create a <code>utenze.operatori</code> table reference
     */
    public Operatori() {
        this(DSL.name("operatori"), null);
    }

    public <O extends Record> Operatori(Table<O> child, ForeignKey<O, OperatoriRecord> key) {
        super(child, key, OPERATORI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<OperatoriRecord> getPrimaryKey() {
        return Keys.KEY_OPERATORI_PRIMARY;
    }

    @Override
    public List<ForeignKey<OperatoriRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_DATIANAGRAFICI);
    }

    private transient Persone _persone;

    public Persone persone() {
        if (_persone == null)
            _persone = new Persone(this, Keys.FK_DATIANAGRAFICI);

        return _persone;
    }

    @Override
    public Operatori as(String alias) {
        return new Operatori(DSL.name(alias), this);
    }

    @Override
    public Operatori as(Name alias) {
        return new Operatori(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Operatori rename(String name) {
        return new Operatori(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Operatori rename(Name name) {
        return new Operatori(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
