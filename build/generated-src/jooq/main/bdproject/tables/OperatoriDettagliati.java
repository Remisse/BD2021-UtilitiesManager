/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Utenze;
import bdproject.tables.records.OperatoriDettagliatiRecord;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatoriDettagliati extends TableImpl<OperatoriDettagliatiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.operatori dettagliati</code>
     */
    public static final OperatoriDettagliati OPERATORI_DETTAGLIATI = new OperatoriDettagliati();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperatoriDettagliatiRecord> getRecordType() {
        return OperatoriDettagliatiRecord.class;
    }

    /**
     * The column <code>utenze.operatori dettagliati.IdPersona</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, Integer> IDPERSONA = createField(DSL.name("IdPersona"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Nome</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Cognome</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> COGNOME = createField(DSL.name("Cognome"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.CodiceFiscale</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> CODICEFISCALE = createField(DSL.name("CodiceFiscale"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Via</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> VIA = createField(DSL.name("Via"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.NumCivico</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> NUMCIVICO = createField(DSL.name("NumCivico"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Comune</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> COMUNE = createField(DSL.name("Comune"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.CAP</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> CAP = createField(DSL.name("CAP"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Provincia</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> PROVINCIA = createField(DSL.name("Provincia"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.DataNascita</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, LocalDate> DATANASCITA = createField(DSL.name("DataNascita"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.NumeroTelefono</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> NUMEROTELEFONO = createField(DSL.name("NumeroTelefono"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Email</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> EMAIL = createField(DSL.name("Email"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Password</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, String> PASSWORD = createField(DSL.name("Password"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>utenze.operatori dettagliati.Stipendio</code>.
     */
    public final TableField<OperatoriDettagliatiRecord, BigDecimal> STIPENDIO = createField(DSL.name("Stipendio"), SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    private OperatoriDettagliati(Name alias, Table<OperatoriDettagliatiRecord> aliased) {
        this(alias, aliased, null);
    }

    private OperatoriDettagliati(Name alias, Table<OperatoriDettagliatiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `operatori dettagliati` as select `p`.`IdPersona` AS `IdPersona`,`p`.`Nome` AS `Nome`,`p`.`Cognome` AS `Cognome`,`p`.`CodiceFiscale` AS `CodiceFiscale`,`p`.`Via` AS `Via`,`p`.`NumCivico` AS `NumCivico`,`p`.`Comune` AS `Comune`,`p`.`CAP` AS `CAP`,`p`.`Provincia` AS `Provincia`,`p`.`DataNascita` AS `DataNascita`,`p`.`NumeroTelefono` AS `NumeroTelefono`,`p`.`Email` AS `Email`,`p`.`Password` AS `Password`,`o`.`Stipendio` AS `Stipendio` from `utenze`.`persone` `p` join `utenze`.`operatori` `o` where (`p`.`IdPersona` = `o`.`IdOperatore`)"));
    }

    /**
     * Create an aliased <code>utenze.operatori dettagliati</code> table
     * reference
     */
    public OperatoriDettagliati(String alias) {
        this(DSL.name(alias), OPERATORI_DETTAGLIATI);
    }

    /**
     * Create an aliased <code>utenze.operatori dettagliati</code> table
     * reference
     */
    public OperatoriDettagliati(Name alias) {
        this(alias, OPERATORI_DETTAGLIATI);
    }

    /**
     * Create a <code>utenze.operatori dettagliati</code> table reference
     */
    public OperatoriDettagliati() {
        this(DSL.name("operatori dettagliati"), null);
    }

    public <O extends Record> OperatoriDettagliati(Table<O> child, ForeignKey<O, OperatoriDettagliatiRecord> key) {
        super(child, key, OPERATORI_DETTAGLIATI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public OperatoriDettagliati as(String alias) {
        return new OperatoriDettagliati(DSL.name(alias), this);
    }

    @Override
    public OperatoriDettagliati as(Name alias) {
        return new OperatoriDettagliati(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OperatoriDettagliati rename(String name) {
        return new OperatoriDettagliati(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OperatoriDettagliati rename(Name name) {
        return new OperatoriDettagliati(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, String, String, String, String, String, String, LocalDate, String, String, String, BigDecimal> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
