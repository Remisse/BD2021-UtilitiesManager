/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.LettureRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Letture extends TableImpl<LettureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.letture</code>
     */
    public static final Letture LETTURE = new Letture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LettureRecord> getRecordType() {
        return LettureRecord.class;
    }

    /**
     * The column <code>utenze.letture.NumeroLettura</code>.
     */
    public final TableField<LettureRecord, Integer> NUMEROLETTURA = createField(DSL.name("NumeroLettura"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.letture.MatricolaContatore</code>.
     */
    public final TableField<LettureRecord, String> MATRICOLACONTATORE = createField(DSL.name("MatricolaContatore"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>utenze.letture.DataEffettuazione</code>.
     */
    public final TableField<LettureRecord, LocalDate> DATAEFFETTUAZIONE = createField(DSL.name("DataEffettuazione"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.letture.Consumi</code>.
     */
    public final TableField<LettureRecord, BigDecimal> CONSUMI = createField(DSL.name("Consumi"), SQLDataType.DECIMAL(20, 4).nullable(false), this, "");

    /**
     * The column <code>utenze.letture.Stato</code>.
     */
    public final TableField<LettureRecord, String> STATO = createField(DSL.name("Stato"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.letture.IdPersona</code>.
     */
    public final TableField<LettureRecord, Integer> IDPERSONA = createField(DSL.name("IdPersona"), SQLDataType.INTEGER.nullable(false), this, "");

    private Letture(Name alias, Table<LettureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Letture(Name alias, Table<LettureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.letture</code> table reference
     */
    public Letture(String alias) {
        this(DSL.name(alias), LETTURE);
    }

    /**
     * Create an aliased <code>utenze.letture</code> table reference
     */
    public Letture(Name alias) {
        this(alias, LETTURE);
    }

    /**
     * Create a <code>utenze.letture</code> table reference
     */
    public Letture() {
        this(DSL.name("letture"), null);
    }

    public <O extends Record> Letture(Table<O> child, ForeignKey<O, LettureRecord> key) {
        super(child, key, LETTURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<LettureRecord, Integer> getIdentity() {
        return (Identity<LettureRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LettureRecord> getPrimaryKey() {
        return Keys.KEY_LETTURE_PRIMARY;
    }

    @Override
    public List<UniqueKey<LettureRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_LETTURE_AK_LETTURE);
    }

    @Override
    public List<ForeignKey<LettureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CORRISPONDENZA, Keys.FK_EFFETTUAZIONE);
    }

    private transient Contatori _contatori;
    private transient Persone _persone;

    public Contatori contatori() {
        if (_contatori == null)
            _contatori = new Contatori(this, Keys.FK_CORRISPONDENZA);

        return _contatori;
    }

    public Persone persone() {
        if (_persone == null)
            _persone = new Persone(this, Keys.FK_EFFETTUAZIONE);

        return _persone;
    }

    @Override
    public List<Check<LettureRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("letture_chk_1"), "(`Consumi` >= 0)", true)
        );
    }

    @Override
    public Letture as(String alias) {
        return new Letture(DSL.name(alias), this);
    }

    @Override
    public Letture as(Name alias) {
        return new Letture(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Letture rename(String name) {
        return new Letture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Letture rename(Name name) {
        return new Letture(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, LocalDate, BigDecimal, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
