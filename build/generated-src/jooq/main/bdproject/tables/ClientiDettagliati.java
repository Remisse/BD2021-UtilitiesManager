/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Utenze;
import bdproject.tables.records.ClientiDettagliatiRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientiDettagliati extends TableImpl<ClientiDettagliatiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.clienti_dettagliati</code>
     */
    public static final ClientiDettagliati CLIENTI_DETTAGLIATI = new ClientiDettagliati();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientiDettagliatiRecord> getRecordType() {
        return ClientiDettagliatiRecord.class;
    }

    /**
     * The column <code>utenze.clienti_dettagliati.Identificativo</code>.
     */
    public final TableField<ClientiDettagliatiRecord, Integer> IDENTIFICATIVO = createField(DSL.name("Identificativo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.CodiceFiscale</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> CODICEFISCALE = createField(DSL.name("CodiceFiscale"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.Nome</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.Cognome</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> COGNOME = createField(DSL.name("Cognome"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.Via</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> VIA = createField(DSL.name("Via"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.NumCivico</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> NUMCIVICO = createField(DSL.name("NumCivico"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.CAP</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> CAP = createField(DSL.name("CAP"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.Comune</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> COMUNE = createField(DSL.name("Comune"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.Provincia</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> PROVINCIA = createField(DSL.name("Provincia"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.DataNascita</code>.
     */
    public final TableField<ClientiDettagliatiRecord, LocalDate> DATANASCITA = createField(DSL.name("DataNascita"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.NumeroTelefono</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> NUMEROTELEFONO = createField(DSL.name("NumeroTelefono"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.Email</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> EMAIL = createField(DSL.name("Email"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.Password</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> PASSWORD = createField(DSL.name("Password"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.clienti_dettagliati.FasciaReddito</code>.
     */
    public final TableField<ClientiDettagliatiRecord, String> FASCIAREDDITO = createField(DSL.name("FasciaReddito"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private ClientiDettagliati(Name alias, Table<ClientiDettagliatiRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientiDettagliati(Name alias, Table<ClientiDettagliatiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `clienti_dettagliati` as select `p`.`Identificativo` AS `Identificativo`,`p`.`CodiceFiscale` AS `CodiceFiscale`,`p`.`Nome` AS `Nome`,`p`.`Cognome` AS `Cognome`,`p`.`Via` AS `Via`,`p`.`NumCivico` AS `NumCivico`,`p`.`CAP` AS `CAP`,`p`.`Comune` AS `Comune`,`p`.`Provincia` AS `Provincia`,`p`.`DataNascita` AS `DataNascita`,`p`.`NumeroTelefono` AS `NumeroTelefono`,`p`.`Email` AS `Email`,`p`.`Password` AS `Password`,`c`.`FasciaReddito` AS `FasciaReddito` from `utenze`.`persone` `p` join `utenze`.`clienti` `c` where (`p`.`Identificativo` = `c`.`CodiceCliente`)"));
    }

    /**
     * Create an aliased <code>utenze.clienti_dettagliati</code> table reference
     */
    public ClientiDettagliati(String alias) {
        this(DSL.name(alias), CLIENTI_DETTAGLIATI);
    }

    /**
     * Create an aliased <code>utenze.clienti_dettagliati</code> table reference
     */
    public ClientiDettagliati(Name alias) {
        this(alias, CLIENTI_DETTAGLIATI);
    }

    /**
     * Create a <code>utenze.clienti_dettagliati</code> table reference
     */
    public ClientiDettagliati() {
        this(DSL.name("clienti_dettagliati"), null);
    }

    public <O extends Record> ClientiDettagliati(Table<O> child, ForeignKey<O, ClientiDettagliatiRecord> key) {
        super(child, key, CLIENTI_DETTAGLIATI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public ClientiDettagliati as(String alias) {
        return new ClientiDettagliati(DSL.name(alias), this);
    }

    @Override
    public ClientiDettagliati as(Name alias) {
        return new ClientiDettagliati(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientiDettagliati rename(String name) {
        return new ClientiDettagliati(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientiDettagliati rename(Name name) {
        return new ClientiDettagliati(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, String, String, String, String, String, String, LocalDate, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
