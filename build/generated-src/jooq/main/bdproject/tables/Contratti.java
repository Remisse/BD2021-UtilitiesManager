/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.ContrattiRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contratti extends TableImpl<ContrattiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.contratti</code>
     */
    public static final Contratti CONTRATTI = new Contratti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContrattiRecord> getRecordType() {
        return ContrattiRecord.class;
    }

    /**
     * The column <code>utenze.contratti.IdContratto</code>.
     */
    public final TableField<ContrattiRecord, Integer> IDCONTRATTO = createField(DSL.name("IdContratto"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.contratti.DataAperturaRichiesta</code>.
     */
    public final TableField<ContrattiRecord, LocalDate> DATAAPERTURARICHIESTA = createField(DSL.name("DataAperturaRichiesta"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.DataChiusuraRichiesta</code>.
     */
    public final TableField<ContrattiRecord, LocalDate> DATACHIUSURARICHIESTA = createField(DSL.name("DataChiusuraRichiesta"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>utenze.contratti.StatoRichiesta</code>.
     */
    public final TableField<ContrattiRecord, String> STATORICHIESTA = createField(DSL.name("StatoRichiesta"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.NoteRichiesta</code>.
     */
    public final TableField<ContrattiRecord, String> NOTERICHIESTA = createField(DSL.name("NoteRichiesta"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.NumeroComponenti</code>.
     */
    public final TableField<ContrattiRecord, Integer> NUMEROCOMPONENTI = createField(DSL.name("NumeroComponenti"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.Uso</code>.
     */
    public final TableField<ContrattiRecord, Integer> USO = createField(DSL.name("Uso"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.Offerta</code>.
     */
    public final TableField<ContrattiRecord, Integer> OFFERTA = createField(DSL.name("Offerta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.TipoAttivazione</code>.
     */
    public final TableField<ContrattiRecord, Integer> TIPOATTIVAZIONE = createField(DSL.name("TipoAttivazione"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.IdImmobile</code>.
     */
    public final TableField<ContrattiRecord, Integer> IDIMMOBILE = createField(DSL.name("IdImmobile"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.contratti.IdCliente</code>.
     */
    public final TableField<ContrattiRecord, Integer> IDCLIENTE = createField(DSL.name("IdCliente"), SQLDataType.INTEGER.nullable(false), this, "");

    private Contratti(Name alias, Table<ContrattiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contratti(Name alias, Table<ContrattiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.contratti</code> table reference
     */
    public Contratti(String alias) {
        this(DSL.name(alias), CONTRATTI);
    }

    /**
     * Create an aliased <code>utenze.contratti</code> table reference
     */
    public Contratti(Name alias) {
        this(alias, CONTRATTI);
    }

    /**
     * Create a <code>utenze.contratti</code> table reference
     */
    public Contratti() {
        this(DSL.name("contratti"), null);
    }

    public <O extends Record> Contratti(Table<O> child, ForeignKey<O, ContrattiRecord> key) {
        super(child, key, CONTRATTI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<ContrattiRecord, Integer> getIdentity() {
        return (Identity<ContrattiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContrattiRecord> getPrimaryKey() {
        return Keys.KEY_CONTRATTI_PRIMARY;
    }

    @Override
    public List<ForeignKey<ContrattiRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_USO, Keys.FK_SOTTOSCRIZIONE, Keys.FK_ATTIVAZIONE_TRAMITE, Keys.FK_COLLEGAMENTO, Keys.FK_RICHIESTA);
    }

    private transient TipologieUso _tipologieUso;
    private transient Offerte _offerte;
    private transient TipiAttivazione _tipiAttivazione;
    private transient Immobili _immobili;
    private transient Clienti _clienti;

    public TipologieUso tipologieUso() {
        if (_tipologieUso == null)
            _tipologieUso = new TipologieUso(this, Keys.FK_USO);

        return _tipologieUso;
    }

    public Offerte offerte() {
        if (_offerte == null)
            _offerte = new Offerte(this, Keys.FK_SOTTOSCRIZIONE);

        return _offerte;
    }

    public TipiAttivazione tipiAttivazione() {
        if (_tipiAttivazione == null)
            _tipiAttivazione = new TipiAttivazione(this, Keys.FK_ATTIVAZIONE_TRAMITE);

        return _tipiAttivazione;
    }

    public Immobili immobili() {
        if (_immobili == null)
            _immobili = new Immobili(this, Keys.FK_COLLEGAMENTO);

        return _immobili;
    }

    public Clienti clienti() {
        if (_clienti == null)
            _clienti = new Clienti(this, Keys.FK_RICHIESTA);

        return _clienti;
    }

    @Override
    public List<Check<ContrattiRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("contratti_chk_1"), "(`StatoRichiesta` in (_utf8mb4\\'In lavorazione\\',_utf8mb4\\'Approvata\\',_utf8mb4\\'Respinta\\'))", true),
            Internal.createCheck(this, DSL.name("contratti_chk_2"), "(`NumeroComponenti` > 0)", true)
        );
    }

    @Override
    public Contratti as(String alias) {
        return new Contratti(DSL.name(alias), this);
    }

    @Override
    public Contratti as(Name alias) {
        return new Contratti(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contratti rename(String name) {
        return new Contratti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contratti rename(Name name) {
        return new Contratti(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, LocalDate, LocalDate, String, String, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
