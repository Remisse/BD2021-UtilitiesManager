/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.BolletteRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bollette extends TableImpl<BolletteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.bollette</code>
     */
    public static final Bollette BOLLETTE = new Bollette();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BolletteRecord> getRecordType() {
        return BolletteRecord.class;
    }

    /**
     * The column <code>utenze.bollette.IdContratto</code>.
     */
    public final TableField<BolletteRecord, Integer> IDCONTRATTO = createField(DSL.name("IdContratto"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.bollette.DataEmissione</code>.
     */
    public final TableField<BolletteRecord, LocalDate> DATAEMISSIONE = createField(DSL.name("DataEmissione"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.bollette.DataScadenza</code>.
     */
    public final TableField<BolletteRecord, LocalDate> DATASCADENZA = createField(DSL.name("DataScadenza"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.bollette.DataPagamento</code>.
     */
    public final TableField<BolletteRecord, LocalDate> DATAPAGAMENTO = createField(DSL.name("DataPagamento"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>utenze.bollette.Importo</code>.
     */
    public final TableField<BolletteRecord, BigDecimal> IMPORTO = createField(DSL.name("Importo"), SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    /**
     * The column <code>utenze.bollette.Consumi</code>.
     */
    public final TableField<BolletteRecord, BigDecimal> CONSUMI = createField(DSL.name("Consumi"), SQLDataType.DECIMAL(20, 6).nullable(false), this, "");

    /**
     * The column <code>utenze.bollette.Stimata</code>.
     */
    public final TableField<BolletteRecord, Byte> STIMATA = createField(DSL.name("Stimata"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>utenze.bollette.ParzialeCanoneRai</code>.
     */
    public final TableField<BolletteRecord, BigDecimal> PARZIALECANONERAI = createField(DSL.name("ParzialeCanoneRai"), SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    /**
     * The column <code>utenze.bollette.CostoAttivazione</code>.
     */
    public final TableField<BolletteRecord, BigDecimal> COSTOATTIVAZIONE = createField(DSL.name("CostoAttivazione"), SQLDataType.DECIMAL(20, 2).nullable(false), this, "");

    private Bollette(Name alias, Table<BolletteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bollette(Name alias, Table<BolletteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.bollette</code> table reference
     */
    public Bollette(String alias) {
        this(DSL.name(alias), BOLLETTE);
    }

    /**
     * Create an aliased <code>utenze.bollette</code> table reference
     */
    public Bollette(Name alias) {
        this(alias, BOLLETTE);
    }

    /**
     * Create a <code>utenze.bollette</code> table reference
     */
    public Bollette() {
        this(DSL.name("bollette"), null);
    }

    public <O extends Record> Bollette(Table<O> child, ForeignKey<O, BolletteRecord> key) {
        super(child, key, BOLLETTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<BolletteRecord> getPrimaryKey() {
        return Keys.KEY_BOLLETTE_PRIMARY;
    }

    @Override
    public List<ForeignKey<BolletteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CONTRATTO);
    }

    private transient Contratti _contratti;

    public Contratti contratti() {
        if (_contratti == null)
            _contratti = new Contratti(this, Keys.FK_CONTRATTO);

        return _contratti;
    }

    @Override
    public List<Check<BolletteRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("bollette_chk_1"), "(`Consumi` >= 0.0)", true),
            Internal.createCheck(this, DSL.name("bollette_chk_2"), "(`ParzialeCanoneRai` >= 0.0)", true),
            Internal.createCheck(this, DSL.name("bollette_chk_3"), "(`CostoAttivazione` >= 0.0)", true)
        );
    }

    @Override
    public Bollette as(String alias) {
        return new Bollette(DSL.name(alias), this);
    }

    @Override
    public Bollette as(Name alias) {
        return new Bollette(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bollette rename(String name) {
        return new Bollette(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bollette rename(Name name) {
        return new Bollette(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, LocalDate, LocalDate, LocalDate, BigDecimal, BigDecimal, Byte, BigDecimal, BigDecimal> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
