/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.CessazioniRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cessazioni extends TableImpl<CessazioniRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.cessazioni</code>
     */
    public static final Cessazioni CESSAZIONI = new Cessazioni();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CessazioniRecord> getRecordType() {
        return CessazioniRecord.class;
    }

    /**
     * The column <code>utenze.cessazioni.NumeroRichiesta</code>.
     */
    public final TableField<CessazioniRecord, Integer> NUMERORICHIESTA = createField(DSL.name("NumeroRichiesta"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.cessazioni.DataAperturaRichiesta</code>.
     */
    public final TableField<CessazioniRecord, LocalDate> DATAAPERTURARICHIESTA = createField(DSL.name("DataAperturaRichiesta"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.cessazioni.DataChiusuraRichiesta</code>.
     */
    public final TableField<CessazioniRecord, LocalDate> DATACHIUSURARICHIESTA = createField(DSL.name("DataChiusuraRichiesta"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>utenze.cessazioni.StatoRichiesta</code>.
     */
    public final TableField<CessazioniRecord, String> STATORICHIESTA = createField(DSL.name("StatoRichiesta"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.cessazioni.NoteRichiesta</code>.
     */
    public final TableField<CessazioniRecord, String> NOTERICHIESTA = createField(DSL.name("NoteRichiesta"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>utenze.cessazioni.IdContratto</code>.
     */
    public final TableField<CessazioniRecord, Integer> IDCONTRATTO = createField(DSL.name("IdContratto"), SQLDataType.INTEGER.nullable(false), this, "");

    private Cessazioni(Name alias, Table<CessazioniRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cessazioni(Name alias, Table<CessazioniRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.cessazioni</code> table reference
     */
    public Cessazioni(String alias) {
        this(DSL.name(alias), CESSAZIONI);
    }

    /**
     * Create an aliased <code>utenze.cessazioni</code> table reference
     */
    public Cessazioni(Name alias) {
        this(alias, CESSAZIONI);
    }

    /**
     * Create a <code>utenze.cessazioni</code> table reference
     */
    public Cessazioni() {
        this(DSL.name("cessazioni"), null);
    }

    public <O extends Record> Cessazioni(Table<O> child, ForeignKey<O, CessazioniRecord> key) {
        super(child, key, CESSAZIONI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<CessazioniRecord, Integer> getIdentity() {
        return (Identity<CessazioniRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CessazioniRecord> getPrimaryKey() {
        return Keys.KEY_CESSAZIONI_PRIMARY;
    }

    @Override
    public List<ForeignKey<CessazioniRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_RIFERIMENTO);
    }

    private transient Contratti _contratti;

    public Contratti contratti() {
        if (_contratti == null)
            _contratti = new Contratti(this, Keys.FK_RIFERIMENTO);

        return _contratti;
    }

    @Override
    public Cessazioni as(String alias) {
        return new Cessazioni(DSL.name(alias), this);
    }

    @Override
    public Cessazioni as(Name alias) {
        return new Cessazioni(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cessazioni rename(String name) {
        return new Cessazioni(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cessazioni rename(Name name) {
        return new Cessazioni(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, LocalDate, LocalDate, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
