/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.PagamentiRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pagamenti extends TableImpl<PagamentiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.pagamenti</code>
     */
    public static final Pagamenti PAGAMENTI = new Pagamenti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PagamentiRecord> getRecordType() {
        return PagamentiRecord.class;
    }

    /**
     * The column <code>utenze.pagamenti.NumeroBolletta</code>.
     */
    public final TableField<PagamentiRecord, Integer> NUMEROBOLLETTA = createField(DSL.name("NumeroBolletta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.pagamenti.DataPagamento</code>.
     */
    public final TableField<PagamentiRecord, LocalDate> DATAPAGAMENTO = createField(DSL.name("DataPagamento"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Pagamenti(Name alias, Table<PagamentiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pagamenti(Name alias, Table<PagamentiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.pagamenti</code> table reference
     */
    public Pagamenti(String alias) {
        this(DSL.name(alias), PAGAMENTI);
    }

    /**
     * Create an aliased <code>utenze.pagamenti</code> table reference
     */
    public Pagamenti(Name alias) {
        this(alias, PAGAMENTI);
    }

    /**
     * Create a <code>utenze.pagamenti</code> table reference
     */
    public Pagamenti() {
        this(DSL.name("pagamenti"), null);
    }

    public <O extends Record> Pagamenti(Table<O> child, ForeignKey<O, PagamentiRecord> key) {
        super(child, key, PAGAMENTI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<PagamentiRecord> getPrimaryKey() {
        return Keys.KEY_PAGAMENTI_PRIMARY;
    }

    @Override
    public List<ForeignKey<PagamentiRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PAGAMENTO);
    }

    private transient Bollette _bollette;

    public Bollette bollette() {
        if (_bollette == null)
            _bollette = new Bollette(this, Keys.FK_PAGAMENTO);

        return _bollette;
    }

    @Override
    public Pagamenti as(String alias) {
        return new Pagamenti(DSL.name(alias), this);
    }

    @Override
    public Pagamenti as(Name alias) {
        return new Pagamenti(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pagamenti rename(String name) {
        return new Pagamenti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pagamenti rename(Name name) {
        return new Pagamenti(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, LocalDate> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
