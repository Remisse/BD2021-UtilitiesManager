/*
 * This file is generated by jOOQ.
 */
package bdproject.tables.records;


import bdproject.tables.Zone;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZoneRecord extends UpdatableRecordImpl<ZoneRecord> implements Record4<Integer, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>utenze.zone.IdZona</code>.
     */
    public ZoneRecord setIdzona(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>utenze.zone.IdZona</code>.
     */
    public Integer getIdzona() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>utenze.zone.Comune</code>.
     */
    public ZoneRecord setComune(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>utenze.zone.Comune</code>.
     */
    public String getComune() {
        return (String) get(1);
    }

    /**
     * Setter for <code>utenze.zone.Provincia</code>.
     */
    public ZoneRecord setProvincia(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>utenze.zone.Provincia</code>.
     */
    public String getProvincia() {
        return (String) get(2);
    }

    /**
     * Setter for <code>utenze.zone.CAP</code>.
     */
    public ZoneRecord setCap(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>utenze.zone.CAP</code>.
     */
    public String getCap() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Zone.ZONE.IDZONA;
    }

    @Override
    public Field<String> field2() {
        return Zone.ZONE.COMUNE;
    }

    @Override
    public Field<String> field3() {
        return Zone.ZONE.PROVINCIA;
    }

    @Override
    public Field<String> field4() {
        return Zone.ZONE.CAP;
    }

    @Override
    public Integer component1() {
        return getIdzona();
    }

    @Override
    public String component2() {
        return getComune();
    }

    @Override
    public String component3() {
        return getProvincia();
    }

    @Override
    public String component4() {
        return getCap();
    }

    @Override
    public Integer value1() {
        return getIdzona();
    }

    @Override
    public String value2() {
        return getComune();
    }

    @Override
    public String value3() {
        return getProvincia();
    }

    @Override
    public String value4() {
        return getCap();
    }

    @Override
    public ZoneRecord value1(Integer value) {
        setIdzona(value);
        return this;
    }

    @Override
    public ZoneRecord value2(String value) {
        setComune(value);
        return this;
    }

    @Override
    public ZoneRecord value3(String value) {
        setProvincia(value);
        return this;
    }

    @Override
    public ZoneRecord value4(String value) {
        setCap(value);
        return this;
    }

    @Override
    public ZoneRecord values(Integer value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ZoneRecord
     */
    public ZoneRecord() {
        super(Zone.ZONE);
    }

    /**
     * Create a detached, initialised ZoneRecord
     */
    public ZoneRecord(Integer idzona, String comune, String provincia, String cap) {
        super(Zone.ZONE);

        setIdzona(idzona);
        setComune(comune);
        setProvincia(provincia);
        setCap(cap);
    }

    /**
     * Create a detached, initialised ZoneRecord
     */
    public ZoneRecord(bdproject.tables.pojos.Zone value) {
        super(Zone.ZONE);

        if (value != null) {
            setIdzona(value.getIdzona());
            setComune(value.getComune());
            setProvincia(value.getProvincia());
            setCap(value.getCap());
        }
    }
}
