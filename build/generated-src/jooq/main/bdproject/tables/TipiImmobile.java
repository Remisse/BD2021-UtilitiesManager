/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.TipiImmobileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TipiImmobile extends TableImpl<TipiImmobileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.tipi_immobile</code>
     */
    public static final TipiImmobile TIPI_IMMOBILE = new TipiImmobile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TipiImmobileRecord> getRecordType() {
        return TipiImmobileRecord.class;
    }

    /**
     * The column <code>utenze.tipi_immobile.Codice</code>.
     */
    public final TableField<TipiImmobileRecord, Integer> CODICE = createField(DSL.name("Codice"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.tipi_immobile.Nome</code>.
     */
    public final TableField<TipiImmobileRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.tipi_immobile.HaInterno</code>.
     */
    public final TableField<TipiImmobileRecord, Byte> HAINTERNO = createField(DSL.name("HaInterno"), SQLDataType.TINYINT.nullable(false), this, "");

    private TipiImmobile(Name alias, Table<TipiImmobileRecord> aliased) {
        this(alias, aliased, null);
    }

    private TipiImmobile(Name alias, Table<TipiImmobileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.tipi_immobile</code> table reference
     */
    public TipiImmobile(String alias) {
        this(DSL.name(alias), TIPI_IMMOBILE);
    }

    /**
     * Create an aliased <code>utenze.tipi_immobile</code> table reference
     */
    public TipiImmobile(Name alias) {
        this(alias, TIPI_IMMOBILE);
    }

    /**
     * Create a <code>utenze.tipi_immobile</code> table reference
     */
    public TipiImmobile() {
        this(DSL.name("tipi_immobile"), null);
    }

    public <O extends Record> TipiImmobile(Table<O> child, ForeignKey<O, TipiImmobileRecord> key) {
        super(child, key, TIPI_IMMOBILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<TipiImmobileRecord, Integer> getIdentity() {
        return (Identity<TipiImmobileRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TipiImmobileRecord> getPrimaryKey() {
        return Keys.KEY_TIPI_IMMOBILE_PRIMARY;
    }

    @Override
    public TipiImmobile as(String alias) {
        return new TipiImmobile(DSL.name(alias), this);
    }

    @Override
    public TipiImmobile as(Name alias) {
        return new TipiImmobile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TipiImmobile rename(String name) {
        return new TipiImmobile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TipiImmobile rename(Name name) {
        return new TipiImmobile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
