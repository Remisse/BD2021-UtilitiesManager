/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.DistributoriRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Distributori extends TableImpl<DistributoriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.distributori</code>
     */
    public static final Distributori DISTRIBUTORI = new Distributori();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DistributoriRecord> getRecordType() {
        return DistributoriRecord.class;
    }

    /**
     * The column <code>utenze.distributori.Id</code>.
     */
    public final TableField<DistributoriRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.distributori.Nome</code>.
     */
    public final TableField<DistributoriRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>utenze.distributori.NumeroContatto</code>.
     */
    public final TableField<DistributoriRecord, String> NUMEROCONTATTO = createField(DSL.name("NumeroContatto"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>utenze.distributori.EmailContatto</code>.
     */
    public final TableField<DistributoriRecord, String> EMAILCONTATTO = createField(DSL.name("EmailContatto"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private Distributori(Name alias, Table<DistributoriRecord> aliased) {
        this(alias, aliased, null);
    }

    private Distributori(Name alias, Table<DistributoriRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.distributori</code> table reference
     */
    public Distributori(String alias) {
        this(DSL.name(alias), DISTRIBUTORI);
    }

    /**
     * Create an aliased <code>utenze.distributori</code> table reference
     */
    public Distributori(Name alias) {
        this(alias, DISTRIBUTORI);
    }

    /**
     * Create a <code>utenze.distributori</code> table reference
     */
    public Distributori() {
        this(DSL.name("distributori"), null);
    }

    public <O extends Record> Distributori(Table<O> child, ForeignKey<O, DistributoriRecord> key) {
        super(child, key, DISTRIBUTORI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<DistributoriRecord, Integer> getIdentity() {
        return (Identity<DistributoriRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DistributoriRecord> getPrimaryKey() {
        return Keys.KEY_DISTRIBUTORI_PRIMARY;
    }

    @Override
    public List<UniqueKey<DistributoriRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DISTRIBUTORI_AK_DISTRIBUTORE);
    }

    @Override
    public Distributori as(String alias) {
        return new Distributori(DSL.name(alias), this);
    }

    @Override
    public Distributori as(Name alias) {
        return new Distributori(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Distributori rename(String name) {
        return new Distributori(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Distributori rename(Name name) {
        return new Distributori(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
