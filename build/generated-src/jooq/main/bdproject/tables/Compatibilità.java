/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.CompatibilitàRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Compatibilità extends TableImpl<CompatibilitàRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.compatibilità</code>
     */
    public static final Compatibilità COMPATIBILITÀ = new Compatibilità();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompatibilitàRecord> getRecordType() {
        return CompatibilitàRecord.class;
    }

    /**
     * The column <code>utenze.compatibilità.CodiceOfferta</code>.
     */
    public final TableField<CompatibilitàRecord, Integer> CODICEOFFERTA = createField(DSL.name("CodiceOfferta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.compatibilità.TipoUso</code>.
     */
    public final TableField<CompatibilitàRecord, String> TIPOUSO = createField(DSL.name("TipoUso"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private Compatibilità(Name alias, Table<CompatibilitàRecord> aliased) {
        this(alias, aliased, null);
    }

    private Compatibilità(Name alias, Table<CompatibilitàRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.compatibilità</code> table reference
     */
    public Compatibilità(String alias) {
        this(DSL.name(alias), COMPATIBILITÀ);
    }

    /**
     * Create an aliased <code>utenze.compatibilità</code> table reference
     */
    public Compatibilità(Name alias) {
        this(alias, COMPATIBILITÀ);
    }

    /**
     * Create a <code>utenze.compatibilità</code> table reference
     */
    public Compatibilità() {
        this(DSL.name("compatibilità"), null);
    }

    public <O extends Record> Compatibilità(Table<O> child, ForeignKey<O, CompatibilitàRecord> key) {
        super(child, key, COMPATIBILITÀ);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<CompatibilitàRecord> getPrimaryKey() {
        return Keys.KEY_COMPATIBILITÀ_PRIMARY;
    }

    @Override
    public List<ForeignKey<CompatibilitàRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_OFFERTAUSO, Keys.FK_USOOFFERTA);
    }

    private transient Offerte _offerte;
    private transient TipologieUso _tipologieUso;

    public Offerte offerte() {
        if (_offerte == null)
            _offerte = new Offerte(this, Keys.FK_OFFERTAUSO);

        return _offerte;
    }

    public TipologieUso tipologieUso() {
        if (_tipologieUso == null)
            _tipologieUso = new TipologieUso(this, Keys.FK_USOOFFERTA);

        return _tipologieUso;
    }

    @Override
    public Compatibilità as(String alias) {
        return new Compatibilità(DSL.name(alias), this);
    }

    @Override
    public Compatibilità as(Name alias) {
        return new Compatibilità(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Compatibilità rename(String name) {
        return new Compatibilità(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Compatibilità rename(Name name) {
        return new Compatibilità(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
