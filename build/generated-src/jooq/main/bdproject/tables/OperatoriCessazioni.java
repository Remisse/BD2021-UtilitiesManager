/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.OperatoriCessazioniRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatoriCessazioni extends TableImpl<OperatoriCessazioniRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.operatori cessazioni</code>
     */
    public static final OperatoriCessazioni OPERATORI_CESSAZIONI = new OperatoriCessazioni();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OperatoriCessazioniRecord> getRecordType() {
        return OperatoriCessazioniRecord.class;
    }

    /**
     * The column <code>utenze.operatori cessazioni.NumeroRichiesta</code>.
     */
    public final TableField<OperatoriCessazioniRecord, Integer> NUMERORICHIESTA = createField(DSL.name("NumeroRichiesta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.operatori cessazioni.IdOperatore</code>.
     */
    public final TableField<OperatoriCessazioniRecord, Integer> IDOPERATORE = createField(DSL.name("IdOperatore"), SQLDataType.INTEGER.nullable(false), this, "");

    private OperatoriCessazioni(Name alias, Table<OperatoriCessazioniRecord> aliased) {
        this(alias, aliased, null);
    }

    private OperatoriCessazioni(Name alias, Table<OperatoriCessazioniRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.operatori cessazioni</code> table
     * reference
     */
    public OperatoriCessazioni(String alias) {
        this(DSL.name(alias), OPERATORI_CESSAZIONI);
    }

    /**
     * Create an aliased <code>utenze.operatori cessazioni</code> table
     * reference
     */
    public OperatoriCessazioni(Name alias) {
        this(alias, OPERATORI_CESSAZIONI);
    }

    /**
     * Create a <code>utenze.operatori cessazioni</code> table reference
     */
    public OperatoriCessazioni() {
        this(DSL.name("operatori cessazioni"), null);
    }

    public <O extends Record> OperatoriCessazioni(Table<O> child, ForeignKey<O, OperatoriCessazioniRecord> key) {
        super(child, key, OPERATORI_CESSAZIONI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<OperatoriCessazioniRecord> getPrimaryKey() {
        return Keys.KEY_OPERATORI_CESSAZIONI_PRIMARY;
    }

    @Override
    public List<ForeignKey<OperatoriCessazioniRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GESTIONE_CC1, Keys.FK_GESTIONE_CO1);
    }

    private transient Cessazioni _cessazioni;
    private transient Operatori _operatori;

    public Cessazioni cessazioni() {
        if (_cessazioni == null)
            _cessazioni = new Cessazioni(this, Keys.FK_GESTIONE_CC1);

        return _cessazioni;
    }

    public Operatori operatori() {
        if (_operatori == null)
            _operatori = new Operatori(this, Keys.FK_GESTIONE_CO1);

        return _operatori;
    }

    @Override
    public OperatoriCessazioni as(String alias) {
        return new OperatoriCessazioni(DSL.name(alias), this);
    }

    @Override
    public OperatoriCessazioni as(Name alias) {
        return new OperatoriCessazioni(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OperatoriCessazioni rename(String name) {
        return new OperatoriCessazioni(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OperatoriCessazioni rename(Name name) {
        return new OperatoriCessazioni(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
