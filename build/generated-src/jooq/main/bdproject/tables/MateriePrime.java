/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.MateriePrimeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MateriePrime extends TableImpl<MateriePrimeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.materie prime</code>
     */
    public static final MateriePrime MATERIE_PRIME = new MateriePrime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MateriePrimeRecord> getRecordType() {
        return MateriePrimeRecord.class;
    }

    /**
     * The column <code>utenze.materie prime.Nome</code>.
     */
    public final TableField<MateriePrimeRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private MateriePrime(Name alias, Table<MateriePrimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private MateriePrime(Name alias, Table<MateriePrimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.materie prime</code> table reference
     */
    public MateriePrime(String alias) {
        this(DSL.name(alias), MATERIE_PRIME);
    }

    /**
     * Create an aliased <code>utenze.materie prime</code> table reference
     */
    public MateriePrime(Name alias) {
        this(alias, MATERIE_PRIME);
    }

    /**
     * Create a <code>utenze.materie prime</code> table reference
     */
    public MateriePrime() {
        this(DSL.name("materie prime"), null);
    }

    public <O extends Record> MateriePrime(Table<O> child, ForeignKey<O, MateriePrimeRecord> key) {
        super(child, key, MATERIE_PRIME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<MateriePrimeRecord> getPrimaryKey() {
        return Keys.KEY_MATERIE_PRIME_PRIMARY;
    }

    @Override
    public MateriePrime as(String alias) {
        return new MateriePrime(DSL.name(alias), this);
    }

    @Override
    public MateriePrime as(Name alias) {
        return new MateriePrime(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MateriePrime rename(String name) {
        return new MateriePrime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MateriePrime rename(Name name) {
        return new MateriePrime(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
