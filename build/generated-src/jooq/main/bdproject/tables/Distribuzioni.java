/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.DistribuzioniRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Distribuzioni extends TableImpl<DistribuzioniRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.distribuzioni</code>
     */
    public static final Distribuzioni DISTRIBUZIONI = new Distribuzioni();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DistribuzioniRecord> getRecordType() {
        return DistribuzioniRecord.class;
    }

    /**
     * The column <code>utenze.distribuzioni.MateriaPrima</code>.
     */
    public final TableField<DistribuzioniRecord, String> MATERIAPRIMA = createField(DSL.name("MateriaPrima"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>utenze.distribuzioni.IdZona</code>.
     */
    public final TableField<DistribuzioniRecord, Integer> IDZONA = createField(DSL.name("IdZona"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.distribuzioni.IdDistributore</code>.
     */
    public final TableField<DistribuzioniRecord, Integer> IDDISTRIBUTORE = createField(DSL.name("IdDistributore"), SQLDataType.INTEGER.nullable(false), this, "");

    private Distribuzioni(Name alias, Table<DistribuzioniRecord> aliased) {
        this(alias, aliased, null);
    }

    private Distribuzioni(Name alias, Table<DistribuzioniRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.distribuzioni</code> table reference
     */
    public Distribuzioni(String alias) {
        this(DSL.name(alias), DISTRIBUZIONI);
    }

    /**
     * Create an aliased <code>utenze.distribuzioni</code> table reference
     */
    public Distribuzioni(Name alias) {
        this(alias, DISTRIBUZIONI);
    }

    /**
     * Create a <code>utenze.distribuzioni</code> table reference
     */
    public Distribuzioni() {
        this(DSL.name("distribuzioni"), null);
    }

    public <O extends Record> Distribuzioni(Table<O> child, ForeignKey<O, DistribuzioniRecord> key) {
        super(child, key, DISTRIBUZIONI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<DistribuzioniRecord> getPrimaryKey() {
        return Keys.KEY_DISTRIBUZIONI_PRIMARY;
    }

    @Override
    public List<ForeignKey<DistribuzioniRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_DISTRIBUITA, Keys.FK_RIFERIMENTO, Keys.FK_OPERAZIONE);
    }

    private transient MateriePrime _materiePrime;
    private transient Zone _zone;
    private transient Distributori _distributori;

    public MateriePrime materiePrime() {
        if (_materiePrime == null)
            _materiePrime = new MateriePrime(this, Keys.FK_DISTRIBUITA);

        return _materiePrime;
    }

    public Zone zone() {
        if (_zone == null)
            _zone = new Zone(this, Keys.FK_RIFERIMENTO);

        return _zone;
    }

    public Distributori distributori() {
        if (_distributori == null)
            _distributori = new Distributori(this, Keys.FK_OPERAZIONE);

        return _distributori;
    }

    @Override
    public Distribuzioni as(String alias) {
        return new Distribuzioni(DSL.name(alias), this);
    }

    @Override
    public Distribuzioni as(Name alias) {
        return new Distribuzioni(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Distribuzioni rename(String name) {
        return new Distribuzioni(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Distribuzioni rename(Name name) {
        return new Distribuzioni(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
