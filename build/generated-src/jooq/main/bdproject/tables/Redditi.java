/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.RedditiRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Redditi extends TableImpl<RedditiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.redditi</code>
     */
    public static final Redditi REDDITI = new Redditi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RedditiRecord> getRecordType() {
        return RedditiRecord.class;
    }

    /**
     * The column <code>utenze.redditi.Codice</code>.
     */
    public final TableField<RedditiRecord, Integer> CODICE = createField(DSL.name("Codice"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.redditi.Fascia</code>.
     */
    public final TableField<RedditiRecord, String> FASCIA = createField(DSL.name("Fascia"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.redditi.Sconto</code>.
     */
    public final TableField<RedditiRecord, BigDecimal> SCONTO = createField(DSL.name("Sconto"), SQLDataType.DECIMAL(7, 6).nullable(false), this, "");

    private Redditi(Name alias, Table<RedditiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Redditi(Name alias, Table<RedditiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.redditi</code> table reference
     */
    public Redditi(String alias) {
        this(DSL.name(alias), REDDITI);
    }

    /**
     * Create an aliased <code>utenze.redditi</code> table reference
     */
    public Redditi(Name alias) {
        this(alias, REDDITI);
    }

    /**
     * Create a <code>utenze.redditi</code> table reference
     */
    public Redditi() {
        this(DSL.name("redditi"), null);
    }

    public <O extends Record> Redditi(Table<O> child, ForeignKey<O, RedditiRecord> key) {
        super(child, key, REDDITI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public UniqueKey<RedditiRecord> getPrimaryKey() {
        return Keys.KEY_REDDITI_PRIMARY;
    }

    @Override
    public List<UniqueKey<RedditiRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_REDDITI_AK_REDDITI);
    }

    @Override
    public List<Check<RedditiRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("redditi_chk_1"), "((`Sconto` > 0.0) and (`Sconto` <= 1.0))", true)
        );
    }

    @Override
    public Redditi as(String alias) {
        return new Redditi(DSL.name(alias), this);
    }

    @Override
    public Redditi as(Name alias) {
        return new Redditi(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Redditi rename(String name) {
        return new Redditi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Redditi rename(Name name) {
        return new Redditi(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
