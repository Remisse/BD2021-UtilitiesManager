/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Keys;
import bdproject.Utenze;
import bdproject.tables.records.RichiesteAttivazioneRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RichiesteAttivazione extends TableImpl<RichiesteAttivazioneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.richieste_attivazione</code>
     */
    public static final RichiesteAttivazione RICHIESTE_ATTIVAZIONE = new RichiesteAttivazione();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RichiesteAttivazioneRecord> getRecordType() {
        return RichiesteAttivazioneRecord.class;
    }

    /**
     * The column <code>utenze.richieste_attivazione.Numero</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> NUMERO = createField(DSL.name("Numero"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.DataRichiesta</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, LocalDate> DATARICHIESTA = createField(DSL.name("DataRichiesta"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.NumeroComponenti</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> NUMEROCOMPONENTI = createField(DSL.name("NumeroComponenti"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Esito</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, String> ESITO = createField(DSL.name("Esito"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Note</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, String> NOTE = createField(DSL.name("Note"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Operatore</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> OPERATORE = createField(DSL.name("Operatore"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Contatore</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> CONTATORE = createField(DSL.name("Contatore"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Cliente</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> CLIENTE = createField(DSL.name("Cliente"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Offerta</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> OFFERTA = createField(DSL.name("Offerta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Uso</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> USO = createField(DSL.name("Uso"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste_attivazione.Attivazione</code>.
     */
    public final TableField<RichiesteAttivazioneRecord, Integer> ATTIVAZIONE = createField(DSL.name("Attivazione"), SQLDataType.INTEGER.nullable(false), this, "");

    private RichiesteAttivazione(Name alias, Table<RichiesteAttivazioneRecord> aliased) {
        this(alias, aliased, null);
    }

    private RichiesteAttivazione(Name alias, Table<RichiesteAttivazioneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>utenze.richieste_attivazione</code> table
     * reference
     */
    public RichiesteAttivazione(String alias) {
        this(DSL.name(alias), RICHIESTE_ATTIVAZIONE);
    }

    /**
     * Create an aliased <code>utenze.richieste_attivazione</code> table
     * reference
     */
    public RichiesteAttivazione(Name alias) {
        this(alias, RICHIESTE_ATTIVAZIONE);
    }

    /**
     * Create a <code>utenze.richieste_attivazione</code> table reference
     */
    public RichiesteAttivazione() {
        this(DSL.name("richieste_attivazione"), null);
    }

    public <O extends Record> RichiesteAttivazione(Table<O> child, ForeignKey<O, RichiesteAttivazioneRecord> key) {
        super(child, key, RICHIESTE_ATTIVAZIONE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public Identity<RichiesteAttivazioneRecord, Integer> getIdentity() {
        return (Identity<RichiesteAttivazioneRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RichiesteAttivazioneRecord> getPrimaryKey() {
        return Keys.KEY_RICHIESTE_ATTIVAZIONE_PRIMARY;
    }

    @Override
    public List<ForeignKey<RichiesteAttivazioneRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ATTIVAZIONE, Keys.FK_COLLEGAMENTO, Keys.FK_RICHIESTA, Keys.FK_SOTTOSCRIZIONE, Keys.FK_USO, Keys.FK_ATTIVAZIONE_TRAMITE);
    }

    private transient Operatori _operatori;
    private transient Contatori _contatori;
    private transient Clienti _clienti;
    private transient Offerte _offerte;
    private transient TipologieUso _tipologieUso;
    private transient TipiAttivazione _tipiAttivazione;

    public Operatori operatori() {
        if (_operatori == null)
            _operatori = new Operatori(this, Keys.FK_ATTIVAZIONE);

        return _operatori;
    }

    public Contatori contatori() {
        if (_contatori == null)
            _contatori = new Contatori(this, Keys.FK_COLLEGAMENTO);

        return _contatori;
    }

    public Clienti clienti() {
        if (_clienti == null)
            _clienti = new Clienti(this, Keys.FK_RICHIESTA);

        return _clienti;
    }

    public Offerte offerte() {
        if (_offerte == null)
            _offerte = new Offerte(this, Keys.FK_SOTTOSCRIZIONE);

        return _offerte;
    }

    public TipologieUso tipologieUso() {
        if (_tipologieUso == null)
            _tipologieUso = new TipologieUso(this, Keys.FK_USO);

        return _tipologieUso;
    }

    public TipiAttivazione tipiAttivazione() {
        if (_tipiAttivazione == null)
            _tipiAttivazione = new TipiAttivazione(this, Keys.FK_ATTIVAZIONE_TRAMITE);

        return _tipiAttivazione;
    }

    @Override
    public List<Check<RichiesteAttivazioneRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("richieste_attivazione_chk_1"), "((`Esito` is null) or (`Esito` in (_utf8mb4\\'A\\',_utf8mb4\\'R\\')))", true)
        );
    }

    @Override
    public RichiesteAttivazione as(String alias) {
        return new RichiesteAttivazione(DSL.name(alias), this);
    }

    @Override
    public RichiesteAttivazione as(Name alias) {
        return new RichiesteAttivazione(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RichiesteAttivazione rename(String name) {
        return new RichiesteAttivazione(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RichiesteAttivazione rename(Name name) {
        return new RichiesteAttivazione(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, LocalDate, Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
