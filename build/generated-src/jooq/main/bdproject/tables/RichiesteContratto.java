/*
 * This file is generated by jOOQ.
 */
package bdproject.tables;


import bdproject.Utenze;
import bdproject.tables.records.RichiesteContrattoRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RichiesteContratto extends TableImpl<RichiesteContrattoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenze.richieste contratto</code>
     */
    public static final RichiesteContratto RICHIESTE_CONTRATTO = new RichiesteContratto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RichiesteContrattoRecord> getRecordType() {
        return RichiesteContrattoRecord.class;
    }

    /**
     * The column <code>utenze.richieste contratto.IdContratto</code>.
     */
    public final TableField<RichiesteContrattoRecord, Integer> IDCONTRATTO = createField(DSL.name("IdContratto"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>utenze.richieste contratto.DataAperturaRichiesta</code>.
     */
    public final TableField<RichiesteContrattoRecord, LocalDate> DATAAPERTURARICHIESTA = createField(DSL.name("DataAperturaRichiesta"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.DataChiusuraRichiesta</code>.
     */
    public final TableField<RichiesteContrattoRecord, LocalDate> DATACHIUSURARICHIESTA = createField(DSL.name("DataChiusuraRichiesta"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>utenze.richieste contratto.StatoRichiesta</code>.
     */
    public final TableField<RichiesteContrattoRecord, String> STATORICHIESTA = createField(DSL.name("StatoRichiesta"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.NoteRichiesta</code>.
     */
    public final TableField<RichiesteContrattoRecord, String> NOTERICHIESTA = createField(DSL.name("NoteRichiesta"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.NumeroComponenti</code>.
     */
    public final TableField<RichiesteContrattoRecord, Integer> NUMEROCOMPONENTI = createField(DSL.name("NumeroComponenti"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.Uso</code>.
     */
    public final TableField<RichiesteContrattoRecord, Integer> USO = createField(DSL.name("Uso"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.Offerta</code>.
     */
    public final TableField<RichiesteContrattoRecord, Integer> OFFERTA = createField(DSL.name("Offerta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.TipoAttivazione</code>.
     */
    public final TableField<RichiesteContrattoRecord, Integer> TIPOATTIVAZIONE = createField(DSL.name("TipoAttivazione"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.IdImmobile</code>.
     */
    public final TableField<RichiesteContrattoRecord, Integer> IDIMMOBILE = createField(DSL.name("IdImmobile"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>utenze.richieste contratto.IdCliente</code>.
     */
    public final TableField<RichiesteContrattoRecord, Integer> IDCLIENTE = createField(DSL.name("IdCliente"), SQLDataType.INTEGER.nullable(false), this, "");

    private RichiesteContratto(Name alias, Table<RichiesteContrattoRecord> aliased) {
        this(alias, aliased, null);
    }

    private RichiesteContratto(Name alias, Table<RichiesteContrattoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `richieste contratto` as select `utenze`.`contratti`.`IdContratto` AS `IdContratto`,`utenze`.`contratti`.`DataAperturaRichiesta` AS `DataAperturaRichiesta`,`utenze`.`contratti`.`DataChiusuraRichiesta` AS `DataChiusuraRichiesta`,`utenze`.`contratti`.`StatoRichiesta` AS `StatoRichiesta`,`utenze`.`contratti`.`NoteRichiesta` AS `NoteRichiesta`,`utenze`.`contratti`.`NumeroComponenti` AS `NumeroComponenti`,`utenze`.`contratti`.`Uso` AS `Uso`,`utenze`.`contratti`.`Offerta` AS `Offerta`,`utenze`.`contratti`.`TipoAttivazione` AS `TipoAttivazione`,`utenze`.`contratti`.`IdImmobile` AS `IdImmobile`,`utenze`.`contratti`.`IdCliente` AS `IdCliente` from `utenze`.`contratti` where ((`utenze`.`contratti`.`DataChiusuraRichiesta` is null) or ((`utenze`.`contratti`.`DataChiusuraRichiesta` is not null) and (`utenze`.`contratti`.`StatoRichiesta` = 'Respinta')))"));
    }

    /**
     * Create an aliased <code>utenze.richieste contratto</code> table reference
     */
    public RichiesteContratto(String alias) {
        this(DSL.name(alias), RICHIESTE_CONTRATTO);
    }

    /**
     * Create an aliased <code>utenze.richieste contratto</code> table reference
     */
    public RichiesteContratto(Name alias) {
        this(alias, RICHIESTE_CONTRATTO);
    }

    /**
     * Create a <code>utenze.richieste contratto</code> table reference
     */
    public RichiesteContratto() {
        this(DSL.name("richieste contratto"), null);
    }

    public <O extends Record> RichiesteContratto(Table<O> child, ForeignKey<O, RichiesteContrattoRecord> key) {
        super(child, key, RICHIESTE_CONTRATTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Utenze.UTENZE;
    }

    @Override
    public RichiesteContratto as(String alias) {
        return new RichiesteContratto(DSL.name(alias), this);
    }

    @Override
    public RichiesteContratto as(Name alias) {
        return new RichiesteContratto(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RichiesteContratto rename(String name) {
        return new RichiesteContratto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RichiesteContratto rename(Name name) {
        return new RichiesteContratto(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, LocalDate, LocalDate, String, String, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
